/**
 * Mock data for template fields used in the Values section
 * This file provides mock DefaultValueField arrays for different template types
 */

import type { DefaultValueField } from '@/components/blueprints/sections/DefaultValuesSection/types';
import { ValueSourceType } from '@/components/blueprints/sections/DefaultValuesSection/types';

// Template IDs mapeados a funções específicas de geração de campos
// Exportado para ser usado em template-schemas.ts
export const templateSpecificGenerators: Record<string, () => DefaultValueField[]> = {
  '1': generateBasicWebAppFields,
  '2': generateReactFrontendFields,
  '4': generatePostgreSQLFields,
  '5': generateMongoDBFields,
  '7': generateNginxIngressFields,
};

// Função para gerar campos específicos para o template "Basic Web Application"
export function generateBasicWebAppFields(): DefaultValueField[] {
  return [
    {
      key: 'replicaCount',
      displayName: 'Replica Count',
      description: 'Number of application replicas',
      value: 2,
      originalValue: 2,
      source: ValueSourceType.TEMPLATE,
      exposed: true,
      overridable: true,
      type: 'number',
      required: true,
      path: ['replicaCount'],
    },
    {
      key: 'image',
      displayName: 'Container Image',
      description: 'Container image configuration',
      value: { repository: 'organization/web-app', tag: 'latest', pullPolicy: 'IfNotPresent' },
      originalValue: {
        repository: 'organization/web-app',
        tag: 'latest',
        pullPolicy: 'IfNotPresent',
      },
      source: ValueSourceType.TEMPLATE,
      exposed: true,
      overridable: true,
      type: 'object',
      required: true,
      path: ['image'],
      children: [
        {
          key: 'image.repository',
          displayName: 'Image Repository',
          description: 'Container image repository',
          value: 'organization/web-app',
          originalValue: 'organization/web-app',
          source: ValueSourceType.TEMPLATE,
          exposed: true,
          overridable: true,
          type: 'string',
          required: true,
          path: ['image', 'repository'],
        },
        {
          key: 'image.tag',
          displayName: 'Image Tag',
          description: 'Container image tag',
          value: 'latest',
          originalValue: 'latest',
          source: ValueSourceType.TEMPLATE,
          exposed: true,
          overridable: true,
          type: 'string',
          required: false,
          path: ['image', 'tag'],
        },
        {
          key: 'image.pullPolicy',
          displayName: 'Image Pull Policy',
          description: 'Kubernetes image pull policy',
          value: 'IfNotPresent',
          originalValue: 'IfNotPresent',
          source: ValueSourceType.TEMPLATE,
          exposed: false,
          overridable: false,
          type: 'string',
          required: false,
          path: ['image', 'pullPolicy'],
        },
      ],
    },
    {
      key: 'service',
      displayName: 'Service Configuration',
      description: 'Kubernetes service configuration',
      value: { type: 'ClusterIP', port: 80, nodePort: null },
      originalValue: { type: 'ClusterIP', port: 80, nodePort: null },
      source: ValueSourceType.TEMPLATE,
      exposed: true,
      overridable: true,
      type: 'object',
      required: true,
      path: ['service'],
      children: [
        {
          key: 'service.type',
          displayName: 'Service Type',
          description: 'Kubernetes service type',
          value: 'ClusterIP',
          originalValue: 'ClusterIP',
          source: ValueSourceType.TEMPLATE,
          exposed: true,
          overridable: true,
          type: 'string',
          required: true,
          path: ['service', 'type'],
        },
        {
          key: 'service.port',
          displayName: 'Service Port',
          description: 'Service port number',
          value: 80,
          originalValue: 80,
          source: ValueSourceType.TEMPLATE,
          exposed: true,
          overridable: true,
          type: 'number',
          required: true,
          path: ['service', 'port'],
        },
      ],
    },
    {
      key: 'env',
      displayName: 'Environment Variables',
      description: 'Application environment variables',
      value: { NODE_ENV: 'production', LOG_LEVEL: 'info' },
      originalValue: { NODE_ENV: 'production', LOG_LEVEL: 'info' },
      source: ValueSourceType.TEMPLATE,
      exposed: true,
      overridable: true,
      type: 'object',
      required: false,
      path: ['env'],
      children: [
        {
          key: 'env.NODE_ENV',
          displayName: 'NODE_ENV',
          description: 'Node.js environment mode',
          value: 'production',
          originalValue: 'production',
          source: ValueSourceType.TEMPLATE,
          exposed: true,
          overridable: true,
          type: 'string',
          required: false,
          path: ['env', 'NODE_ENV'],
        },
        {
          key: 'env.LOG_LEVEL',
          displayName: 'LOG_LEVEL',
          description: 'Application log level',
          value: 'info',
          originalValue: 'info',
          source: ValueSourceType.TEMPLATE,
          exposed: true,
          overridable: true,
          type: 'string',
          required: false,
          path: ['env', 'LOG_LEVEL'],
        },
      ],
    },
  ];
}

// Função para gerar campos específicos para o template "React Frontend"
export function generateReactFrontendFields(): DefaultValueField[] {
  return [
    {
      key: 'replicaCount',
      displayName: 'Replica Count',
      description: 'Number of application replicas',
      value: 1,
      originalValue: 1,
      source: ValueSourceType.TEMPLATE,
      exposed: true,
      overridable: true,
      type: 'number',
      required: true,
      path: ['replicaCount'],
    },
    {
      key: 'image',
      displayName: 'Container Image',
      description: 'Container image configuration',
      value: { repository: 'organization/react-app', tag: 'stable', pullPolicy: 'Always' },
      originalValue: { repository: 'organization/react-app', tag: 'stable', pullPolicy: 'Always' },
      source: ValueSourceType.TEMPLATE,
      exposed: true,
      overridable: true,
      type: 'object',
      required: true,
      path: ['image'],
      children: [
        {
          key: 'image.repository',
          displayName: 'Image Repository',
          description: 'Container image repository',
          value: 'organization/react-app',
          originalValue: 'organization/react-app',
          source: ValueSourceType.TEMPLATE,
          exposed: true,
          overridable: true,
          type: 'string',
          required: true,
          path: ['image', 'repository'],
        },
        {
          key: 'image.tag',
          displayName: 'Image Tag',
          description: 'Container image tag',
          value: 'stable',
          originalValue: 'stable',
          source: ValueSourceType.TEMPLATE,
          exposed: true,
          overridable: true,
          type: 'string',
          required: false,
          path: ['image', 'tag'],
        },
      ],
    },
    {
      key: 'nginx',
      displayName: 'Nginx Configuration',
      description: 'Nginx web server settings',
      value: { clientMaxBodySize: '1m', keepAlive: 65 },
      originalValue: { clientMaxBodySize: '1m', keepAlive: 65 },
      source: ValueSourceType.TEMPLATE,
      exposed: true,
      overridable: false,
      type: 'object',
      required: false,
      path: ['nginx'],
      children: [
        {
          key: 'nginx.clientMaxBodySize',
          displayName: 'Client Max Body Size',
          description: 'Maximum upload size',
          value: '1m',
          originalValue: '1m',
          source: ValueSourceType.TEMPLATE,
          exposed: true,
          overridable: false,
          type: 'string',
          required: false,
          path: ['nginx', 'clientMaxBodySize'],
        },
        {
          key: 'nginx.keepAlive',
          displayName: 'Keep Alive Timeout',
          description: 'Keep-alive connection timeout',
          value: 65,
          originalValue: 65,
          source: ValueSourceType.TEMPLATE,
          exposed: true,
          overridable: false,
          type: 'number',
          required: false,
          path: ['nginx', 'keepAlive'],
        },
      ],
    },
    {
      key: 'reactEnv',
      displayName: 'React Environment',
      description: 'React application environment variables',
      value: {
        REACT_APP_API_URL: 'https://api.example.com',
        REACT_APP_FEATURE_FLAGS: 'v2,dark-mode',
      },
      originalValue: {
        REACT_APP_API_URL: 'https://api.example.com',
        REACT_APP_FEATURE_FLAGS: 'v2,dark-mode',
      },
      source: ValueSourceType.TEMPLATE,
      exposed: true,
      overridable: true,
      type: 'object',
      required: false,
      path: ['reactEnv'],
      children: [
        {
          key: 'reactEnv.REACT_APP_API_URL',
          displayName: 'API URL',
          description: 'Backend API URL',
          value: 'https://api.example.com',
          originalValue: 'https://api.example.com',
          source: ValueSourceType.TEMPLATE,
          exposed: true,
          overridable: true,
          type: 'string',
          required: true,
          path: ['reactEnv', 'REACT_APP_API_URL'],
        },
        {
          key: 'reactEnv.REACT_APP_FEATURE_FLAGS',
          displayName: 'Feature Flags',
          description: 'Enabled feature flags',
          value: 'v2,dark-mode',
          originalValue: 'v2,dark-mode',
          source: ValueSourceType.TEMPLATE,
          exposed: true,
          overridable: true,
          type: 'string',
          required: false,
          path: ['reactEnv', 'REACT_APP_FEATURE_FLAGS'],
        },
      ],
    },
  ];
}

// Função para gerar campos específicos para o template "PostgreSQL Database"
export function generatePostgreSQLFields(): DefaultValueField[] {
  return [
    {
      key: 'postgresql',
      displayName: 'PostgreSQL Configuration',
      description: 'PostgreSQL database configuration',
      value: {
        username: 'postgres',
        password: 'changeme',
        database: 'app_database',
        port: 5432,
      },
      originalValue: {
        username: 'postgres',
        password: 'changeme',
        database: 'app_database',
        port: 5432,
      },
      source: ValueSourceType.TEMPLATE,
      exposed: true,
      overridable: true,
      type: 'object',
      required: true,
      path: ['postgresql'],
      children: [
        {
          key: 'postgresql.username',
          displayName: 'Username',
          description: 'PostgreSQL admin user',
          value: 'postgres',
          originalValue: 'postgres',
          source: ValueSourceType.TEMPLATE,
          exposed: true,
          overridable: true,
          type: 'string',
          required: true,
          path: ['postgresql', 'username'],
        },
        {
          key: 'postgresql.password',
          displayName: 'Password',
          description: 'PostgreSQL admin password',
          value: 'changeme',
          originalValue: 'changeme',
          source: ValueSourceType.TEMPLATE,
          exposed: true,
          overridable: true,
          type: 'string',
          required: true,
          path: ['postgresql', 'password'],
        },
        {
          key: 'postgresql.database',
          displayName: 'Database Name',
          description: 'Name of the default database',
          value: 'app_database',
          originalValue: 'app_database',
          source: ValueSourceType.TEMPLATE,
          exposed: true,
          overridable: true,
          type: 'string',
          required: true,
          path: ['postgresql', 'database'],
        },
        {
          key: 'postgresql.port',
          displayName: 'Port',
          description: 'PostgreSQL port',
          value: 5432,
          originalValue: 5432,
          source: ValueSourceType.TEMPLATE,
          exposed: false,
          overridable: false,
          type: 'number',
          required: true,
          path: ['postgresql', 'port'],
        },
      ],
    },
    {
      key: 'persistence',
      displayName: 'Persistence',
      description: 'Persistence configuration',
      value: {
        enabled: true,
        storageClass: '',
        size: '8Gi',
      },
      originalValue: {
        enabled: true,
        storageClass: '',
        size: '8Gi',
      },
      source: ValueSourceType.TEMPLATE,
      exposed: true,
      overridable: true,
      type: 'object',
      required: false,
      path: ['persistence'],
      children: [
        {
          key: 'persistence.enabled',
          displayName: 'Enable Persistence',
          description: 'Use persistent volume for PostgreSQL',
          value: true,
          originalValue: true,
          source: ValueSourceType.TEMPLATE,
          exposed: true,
          overridable: true,
          type: 'boolean',
          required: false,
          path: ['persistence', 'enabled'],
        },
        {
          key: 'persistence.storageClass',
          displayName: 'Storage Class',
          description: 'Storage class for the PostgreSQL volume',
          value: '',
          originalValue: '',
          source: ValueSourceType.TEMPLATE,
          exposed: true,
          overridable: true,
          type: 'string',
          required: false,
          path: ['persistence', 'storageClass'],
        },
        {
          key: 'persistence.size',
          displayName: 'Volume Size',
          description: 'Size of the PostgreSQL volume',
          value: '8Gi',
          originalValue: '8Gi',
          source: ValueSourceType.TEMPLATE,
          exposed: true,
          overridable: true,
          type: 'string',
          required: false,
          path: ['persistence', 'size'],
        },
      ],
    },
  ];
}

// Função para gerar campos específicos para o template "MongoDB Deployment"
export function generateMongoDBFields(): DefaultValueField[] {
  return [
    {
      key: 'mongodb',
      displayName: 'MongoDB Configuration',
      description: 'MongoDB database configuration',
      value: {
        auth: {
          enabled: true,
          rootPassword: 'changeme123',
          username: 'app_user',
          password: 'app_password',
          database: 'app_database',
        },
        replicaCount: 3,
      },
      originalValue: {
        auth: {
          enabled: true,
          rootPassword: 'changeme123',
          username: 'app_user',
          password: 'app_password',
          database: 'app_database',
        },
        replicaCount: 3,
      },
      source: ValueSourceType.TEMPLATE,
      exposed: true,
      overridable: true,
      type: 'object',
      required: true,
      path: ['mongodb'],
      children: [
        {
          key: 'mongodb.auth',
          displayName: 'Authentication',
          description: 'MongoDB authentication settings',
          value: {
            enabled: true,
            rootPassword: 'changeme123',
            username: 'app_user',
            password: 'app_password',
            database: 'app_database',
          },
          originalValue: {
            enabled: true,
            rootPassword: 'changeme123',
            username: 'app_user',
            password: 'app_password',
            database: 'app_database',
          },
          source: ValueSourceType.TEMPLATE,
          exposed: true,
          overridable: true,
          type: 'object',
          required: true,
          path: ['mongodb', 'auth'],
          children: [
            {
              key: 'mongodb.auth.enabled',
              displayName: 'Enable Authentication',
              description: 'Whether to enable MongoDB authentication',
              value: true,
              originalValue: true,
              source: ValueSourceType.TEMPLATE,
              exposed: true,
              overridable: false,
              type: 'boolean',
              required: true,
              path: ['mongodb', 'auth', 'enabled'],
            },
            {
              key: 'mongodb.auth.rootPassword',
              displayName: 'Root Password',
              description: 'MongoDB root password',
              value: 'changeme123',
              originalValue: 'changeme123',
              source: ValueSourceType.TEMPLATE,
              exposed: true,
              overridable: true,
              type: 'string',
              required: true,
              path: ['mongodb', 'auth', 'rootPassword'],
            },
            {
              key: 'mongodb.auth.username',
              displayName: 'Username',
              description: 'MongoDB application user',
              value: 'app_user',
              originalValue: 'app_user',
              source: ValueSourceType.TEMPLATE,
              exposed: true,
              overridable: true,
              type: 'string',
              required: false,
              path: ['mongodb', 'auth', 'username'],
            },
            {
              key: 'mongodb.auth.password',
              displayName: 'Password',
              description: 'MongoDB application password',
              value: 'app_password',
              originalValue: 'app_password',
              source: ValueSourceType.TEMPLATE,
              exposed: true,
              overridable: true,
              type: 'string',
              required: false,
              path: ['mongodb', 'auth', 'password'],
            },
            {
              key: 'mongodb.auth.database',
              displayName: 'Database',
              description: 'MongoDB application database',
              value: 'app_database',
              originalValue: 'app_database',
              source: ValueSourceType.TEMPLATE,
              exposed: true,
              overridable: true,
              type: 'string',
              required: false,
              path: ['mongodb', 'auth', 'database'],
            },
          ],
        },
        {
          key: 'mongodb.replicaCount',
          displayName: 'Replica Count',
          description: 'Number of MongoDB replicas',
          value: 3,
          originalValue: 3,
          source: ValueSourceType.TEMPLATE,
          exposed: true,
          overridable: true,
          type: 'number',
          required: true,
          path: ['mongodb', 'replicaCount'],
        },
      ],
    },
    {
      key: 'storage',
      displayName: 'Storage',
      description: 'MongoDB storage configuration',
      value: {
        size: '10Gi',
        storageClass: 'standard',
      },
      originalValue: {
        size: '10Gi',
        storageClass: 'standard',
      },
      source: ValueSourceType.TEMPLATE,
      exposed: true,
      overridable: true,
      type: 'object',
      required: false,
      path: ['storage'],
      children: [
        {
          key: 'storage.size',
          displayName: 'Storage Size',
          description: 'Size of storage for MongoDB',
          value: '10Gi',
          originalValue: '10Gi',
          source: ValueSourceType.TEMPLATE,
          exposed: true,
          overridable: true,
          type: 'string',
          required: false,
          path: ['storage', 'size'],
        },
        {
          key: 'storage.storageClass',
          displayName: 'Storage Class',
          description: 'StorageClass for MongoDB',
          value: 'standard',
          originalValue: 'standard',
          source: ValueSourceType.TEMPLATE,
          exposed: true,
          overridable: true,
          type: 'string',
          required: false,
          path: ['storage', 'storageClass'],
        },
      ],
    },
  ];
}

// Função para gerar campos específicos para o template "Nginx Ingress Controller"
export function generateNginxIngressFields(): DefaultValueField[] {
  return [
    {
      key: 'controller',
      displayName: 'Controller',
      description: 'Nginx Ingress Controller configuration',
      value: {
        replicaCount: 2,
        service: {
          type: 'LoadBalancer',
          externalTrafficPolicy: 'Local',
        },
        metrics: {
          enabled: true,
        },
      },
      originalValue: {
        replicaCount: 2,
        service: {
          type: 'LoadBalancer',
          externalTrafficPolicy: 'Local',
        },
        metrics: {
          enabled: true,
        },
      },
      source: ValueSourceType.TEMPLATE,
      exposed: true,
      overridable: true,
      type: 'object',
      required: true,
      path: ['controller'],
      children: [
        {
          key: 'controller.replicaCount',
          displayName: 'Replica Count',
          description: 'Number of controller replicas',
          value: 2,
          originalValue: 2,
          source: ValueSourceType.TEMPLATE,
          exposed: true,
          overridable: true,
          type: 'number',
          required: true,
          path: ['controller', 'replicaCount'],
        },
        {
          key: 'controller.service',
          displayName: 'Service',
          description: 'Ingress controller service configuration',
          value: {
            type: 'LoadBalancer',
            externalTrafficPolicy: 'Local',
          },
          originalValue: {
            type: 'LoadBalancer',
            externalTrafficPolicy: 'Local',
          },
          source: ValueSourceType.TEMPLATE,
          exposed: true,
          overridable: true,
          type: 'object',
          required: true,
          path: ['controller', 'service'],
          children: [
            {
              key: 'controller.service.type',
              displayName: 'Service Type',
              description: 'Kubernetes service type',
              value: 'LoadBalancer',
              originalValue: 'LoadBalancer',
              source: ValueSourceType.TEMPLATE,
              exposed: true,
              overridable: true,
              type: 'string',
              required: true,
              path: ['controller', 'service', 'type'],
            },
            {
              key: 'controller.service.externalTrafficPolicy',
              displayName: 'External Traffic Policy',
              description: 'Route external traffic to node-local or cluster-wide endpoints',
              value: 'Local',
              originalValue: 'Local',
              source: ValueSourceType.TEMPLATE,
              exposed: true,
              overridable: false,
              type: 'string',
              required: false,
              path: ['controller', 'service', 'externalTrafficPolicy'],
            },
          ],
        },
        {
          key: 'controller.metrics',
          displayName: 'Metrics',
          description: 'Prometheus metrics configuration',
          value: {
            enabled: true,
          },
          originalValue: {
            enabled: true,
          },
          source: ValueSourceType.TEMPLATE,
          exposed: true,
          overridable: false,
          type: 'object',
          required: false,
          path: ['controller', 'metrics'],
          children: [
            {
              key: 'controller.metrics.enabled',
              displayName: 'Enable Metrics',
              description: 'Whether to expose Prometheus metrics',
              value: true,
              originalValue: true,
              source: ValueSourceType.TEMPLATE,
              exposed: true,
              overridable: false,
              type: 'boolean',
              required: false,
              path: ['controller', 'metrics', 'enabled'],
            },
          ],
        },
      ],
    },
    {
      key: 'config',
      displayName: 'Configuration',
      description: 'ConfigMap settings for the controller',
      value: {
        'use-forwarded-headers': 'true',
        'proxy-buffer-size': '16k',
        'client-max-body-size': '50m',
      },
      originalValue: {
        'use-forwarded-headers': 'true',
        'proxy-buffer-size': '16k',
        'client-max-body-size': '50m',
      },
      source: ValueSourceType.TEMPLATE,
      exposed: true,
      overridable: true,
      type: 'object',
      required: false,
      path: ['config'],
      children: [
        {
          key: 'config.use-forwarded-headers',
          displayName: 'Use Forwarded Headers',
          description: 'Use X-Forwarded-* headers',
          value: 'true',
          originalValue: 'true',
          source: ValueSourceType.TEMPLATE,
          exposed: true,
          overridable: true,
          type: 'string',
          required: false,
          path: ['config', 'use-forwarded-headers'],
        },
        {
          key: 'config.proxy-buffer-size',
          displayName: 'Proxy Buffer Size',
          description: 'Sets the proxy buffer size',
          value: '16k',
          originalValue: '16k',
          source: ValueSourceType.TEMPLATE,
          exposed: true,
          overridable: true,
          type: 'string',
          required: false,
          path: ['config', 'proxy-buffer-size'],
        },
        {
          key: 'config.client-max-body-size',
          displayName: 'Client Max Body Size',
          description: 'Maximum allowed client request body size',
          value: '50m',
          originalValue: '50m',
          source: ValueSourceType.TEMPLATE,
          exposed: true,
          overridable: true,
          type: 'string',
          required: false,
          path: ['config', 'client-max-body-size'],
        },
      ],
    },
  ];
}

/**
 * Generate mock fields for database templates
 */
export function generateDatabaseFields(): DefaultValueField[] {
  return [
    {
      key: 'database.name',
      displayName: 'Database Name',
      description: 'The name of the database instance',
      value: 'example-db',
      originalValue: 'example-db',
      source: ValueSourceType.TEMPLATE,
      exposed: true,
      overridable: true,
      type: 'string',
      required: true,
      path: ['database', 'name'],
    },
    {
      key: 'database.engine',
      displayName: 'Database Engine',
      description: 'The database engine to use',
      value: 'postgres',
      originalValue: 'postgres',
      source: ValueSourceType.TEMPLATE,
      exposed: true,
      overridable: false,
      type: 'string',
      required: true,
      path: ['database', 'engine'],
    },
    {
      key: 'database.version',
      displayName: 'Engine Version',
      description: 'The version of the database engine',
      value: '13.4',
      originalValue: '13.4',
      source: ValueSourceType.TEMPLATE,
      exposed: true,
      overridable: true,
      type: 'string',
      required: false,
      path: ['database', 'version'],
    },
    {
      key: 'database.resources',
      displayName: 'Resources',
      description: 'Resource allocation for the database',
      value: { cpu: '500m', memory: '1Gi' },
      originalValue: { cpu: '500m', memory: '1Gi' },
      source: ValueSourceType.TEMPLATE,
      exposed: true,
      overridable: true,
      type: 'object',
      required: false,
      path: ['database', 'resources'],
      children: [
        {
          key: 'database.resources.cpu',
          displayName: 'CPU Request',
          description: 'CPU resource request',
          value: '500m',
          originalValue: '500m',
          source: ValueSourceType.TEMPLATE,
          exposed: true,
          overridable: true,
          type: 'string',
          required: false,
          path: ['database', 'resources', 'cpu'],
        },
        {
          key: 'database.resources.memory',
          displayName: 'Memory Request',
          description: 'Memory resource request',
          value: '1Gi',
          originalValue: '1Gi',
          source: ValueSourceType.TEMPLATE,
          exposed: true,
          overridable: true,
          type: 'string',
          required: false,
          path: ['database', 'resources', 'memory'],
        },
      ],
    },
  ];
}

/**
 * Generate mock fields for application templates
 */
export function generateApplicationFields(): DefaultValueField[] {
  return [
    {
      key: 'application.replicas',
      displayName: 'Replica Count',
      description: 'Number of application replicas',
      value: 2,
      originalValue: 2,
      source: ValueSourceType.TEMPLATE,
      exposed: true,
      overridable: true,
      type: 'number',
      required: true,
      path: ['application', 'replicas'],
    },
    {
      key: 'application.image',
      displayName: 'Container Image',
      description: 'Container image configuration',
      value: { repository: 'nginx', tag: 'latest' },
      originalValue: { repository: 'nginx', tag: 'latest' },
      source: ValueSourceType.TEMPLATE,
      exposed: true,
      overridable: true,
      type: 'object',
      required: true,
      path: ['application', 'image'],
      children: [
        {
          key: 'application.image.repository',
          displayName: 'Image Repository',
          description: 'Container image repository',
          value: 'nginx',
          originalValue: 'nginx',
          source: ValueSourceType.TEMPLATE,
          exposed: true,
          overridable: true,
          type: 'string',
          required: true,
          path: ['application', 'image', 'repository'],
        },
        {
          key: 'application.image.tag',
          displayName: 'Image Tag',
          description: 'Container image tag',
          value: 'latest',
          originalValue: 'latest',
          source: ValueSourceType.TEMPLATE,
          exposed: true,
          overridable: true,
          type: 'string',
          required: false,
          path: ['application', 'image', 'tag'],
        },
      ],
    },
    {
      key: 'application.environment',
      displayName: 'Environment Variables',
      description: 'Application environment variables',
      value: { NODE_ENV: 'production', LOG_LEVEL: 'info' },
      originalValue: { NODE_ENV: 'production', LOG_LEVEL: 'info' },
      source: ValueSourceType.TEMPLATE,
      exposed: true,
      overridable: true,
      type: 'object',
      required: false,
      path: ['application', 'environment'],
      children: [
        {
          key: 'application.environment.NODE_ENV',
          displayName: 'NODE_ENV',
          description: 'Node environment',
          value: 'production',
          originalValue: 'production',
          source: ValueSourceType.TEMPLATE,
          exposed: true,
          overridable: true,
          type: 'string',
          required: false,
          path: ['application', 'environment', 'NODE_ENV'],
        },
        {
          key: 'application.environment.LOG_LEVEL',
          displayName: 'LOG_LEVEL',
          description: 'Logging level',
          value: 'info',
          originalValue: 'info',
          source: ValueSourceType.TEMPLATE,
          exposed: true,
          overridable: true,
          type: 'string',
          required: false,
          path: ['application', 'environment', 'LOG_LEVEL'],
        },
      ],
    },
  ];
}

/**
 * Generate mock fields for network templates
 */
export function generateNetworkFields(): DefaultValueField[] {
  return [
    {
      key: 'network.type',
      displayName: 'Network Type',
      description: 'Type of network to create',
      value: 'vpc',
      originalValue: 'vpc',
      source: ValueSourceType.TEMPLATE,
      exposed: true,
      overridable: false,
      type: 'string',
      required: true,
      path: ['network', 'type'],
    },
    {
      key: 'network.cidr',
      displayName: 'CIDR Block',
      description: 'CIDR block for the network',
      value: '10.0.0.0/16',
      originalValue: '10.0.0.0/16',
      source: ValueSourceType.TEMPLATE,
      exposed: true,
      overridable: true,
      type: 'string',
      required: true,
      path: ['network', 'cidr'],
    },
    {
      key: 'network.subnets',
      displayName: 'Subnets',
      description: 'Network subnet configuration',
      value: [
        { name: 'public', cidr: '10.0.1.0/24', isPublic: true },
        { name: 'private', cidr: '10.0.2.0/24', isPublic: false },
      ],
      originalValue: [
        { name: 'public', cidr: '10.0.1.0/24', isPublic: true },
        { name: 'private', cidr: '10.0.2.0/24', isPublic: false },
      ],
      source: ValueSourceType.TEMPLATE,
      exposed: true,
      overridable: true,
      type: 'array',
      required: false,
      path: ['network', 'subnets'],
    },
  ];
}

/**
 * Generate mock fields for generic templates
 */
export function generateGenericFields(): DefaultValueField[] {
  return [
    {
      key: 'name',
      displayName: 'Name',
      description: 'Resource name',
      value: 'generic-resource',
      originalValue: 'generic-resource',
      source: ValueSourceType.TEMPLATE,
      exposed: true,
      overridable: true,
      type: 'string',
      required: true,
      path: ['name'],
    },
    {
      key: 'description',
      displayName: 'Description',
      description: 'Resource description',
      value: 'A generic resource deployment',
      originalValue: 'A generic resource deployment',
      source: ValueSourceType.TEMPLATE,
      exposed: true,
      overridable: true,
      type: 'string',
      required: false,
      path: ['description'],
    },
    {
      key: 'enabled',
      displayName: 'Enabled',
      description: 'Whether the resource is enabled',
      value: true,
      originalValue: true,
      source: ValueSourceType.TEMPLATE,
      exposed: true,
      overridable: true,
      type: 'boolean',
      required: false,
      path: ['enabled'],
    },
  ];
}

/**
 * Get mock fields based on template type
 */
export function getMockFieldsByType(
  templateType: 'database' | 'application' | 'network' | 'generic'
): DefaultValueField[] {
  switch (templateType) {
    case 'database':
      return generateDatabaseFields();
    case 'application':
      return generateApplicationFields();
    case 'network':
      return generateNetworkFields();
    case 'generic':
    default:
      return generateGenericFields();
  }
}
